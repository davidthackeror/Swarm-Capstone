Index: src/Battle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.sound.sampled.*;\r\nimport java.awt.*;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport java.math.*;\r\n\r\n\r\n/**\r\n * Project: Swarm Capstone\r\n * : Controls execution of the battle\r\n *\r\n * @author David Thacker\r\n * Date: 21 Jan 21\r\n * Class: Capstone\r\n */\r\nclass Battle {\r\n    /**\r\n     * the relative path to the death sound\r\n     */\r\n    static String fileName = \"Explosion.wav\";\r\n\r\n    /**\r\n     * the armies arraylist containing all armys and therefore warriors\r\n     */\r\n    private static ArrayList<Swarm> swarms = new ArrayList<>();\r\n\r\n    //TODO: Placeholder for a gui assignment of the # of drones.\r\n    public static int numDrones = 30;\r\n\r\n    private static int collisionRadius = 300;\r\n    //TODO: do drone attributes in a different location\r\n    /**\r\n     * sets the attributes of the drones, should be refactored\r\n     *\r\n     * @param array stores attributes of the drones in an array\r\n     */\r\n    static void setDroneArrayAttributes(int[] array) {\r\n        array[0] = 50;//health\r\n        array[1] = 10;//minAttack\r\n        array[2] = 20;//maxAttack\r\n        array[3] = 4;//minSpeed\r\n        array[4] = 6;//maxSpeed\r\n        array[5] = 10;//minCourage\r\n        array[6] = 30;//maxCourage\r\n        array[7] = 10;//Size\r\n        array[8] = 200;//Range\r\n\r\n    }\r\n\r\n    Battle() {\r\n        //TODO: Change ALgo Num\r\n        addSwarm(0, \"allies\", swarms, 0);\r\n        addSwarm(1, \"axis\", swarms, 0);\r\n\r\n    }\r\n\r\n    /**\r\n     * adds an army with predetermined warrior allotments and the following attributes\r\n     *\r\n     * @param allianceNumber the number the army associates its alliance with\r\n     * @param name           the name of that army\r\n     * @param swarms         the arraylist containing all armys\r\n     */\r\n    static void addSwarm(int allianceNumber, String name, ArrayList<Swarm> swarms, int algoNum) {\r\n        swarms.add(armySize(allianceNumber, name, algoNum));\r\n    }\r\n\r\n    static ArrayList<Swarm> getSwarms(){\r\n        return swarms;\r\n    }\r\n    /**\r\n     * calls drawWarriors while also passing the armies array contained within\r\n     * @param g the graphics panel to be drawn on\r\n     */\r\n    static void drawSwarm(Graphics g) {\r\n        Battle.drawDrone((Graphics2D) g, swarms);\r\n    }\r\n\r\n    /**\r\n     * detectEnemy() uses the Vector330Class to determine the enemy closest to a selected warrior\r\n     * and store the closest warrior, its magnitude, and army in the array\r\n     *\r\n     * @param attacker  the specific warrior to detect the closest enemy for\r\n     * @param defenders the entire enemy army\r\n     */\r\n    private static void detectEnemy(Drone attacker, Swarm defenders, int[] minArray) {\r\n        int index = -1;\r\n        int minimumDistance = 1000;\r\n        Vector330Class calcVector = new Vector330Class();\r\n        //for every defender in the army check to see their distance\r\n        for (int j = 0; j < defenders.drones.size(); j++) {\r\n            //check to see if that selected soldier is alive\r\n            if (defenders.drones.get(j).isAlive()) {\r\n                //calculate a vector for the difference in positions between the warrior and the selected defender\r\n                calcVector.setX(defenders.drones.get(j).getxPos() - attacker.getxPos());\r\n                calcVector.setY(defenders.drones.get(j).getyPos() - attacker.getyPos());\r\n                calcVector.setY(defenders.drones.get(j).getzPos() - attacker.getzPos()); //Check this line\r\n                //check to see if that magnitude is the smallest yet\r\n                if (calcVector.magnitude() < minArray[1]) {\r\n                    minArray[2] = defenders.getAllianceNum();\r\n                    minArray[1] = (int) calcVector.magnitude();\r\n                    minArray[0] = j;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * outOfBounds() detects if a specific warrior is out of the bounds of the graphics window\r\n     *\r\n     * @param attacker the warrior to check its position\r\n     * @return a true if out of bounds\r\n     */\r\n\r\n    static boolean outOfBounds(Drone attacker) {\r\n        return attacker.getxPos() > Main.SIZE * Main.ratioX || attacker.getyPos() > Main.SIZE * Main.ratioY || attacker.getxPos() < 0 || attacker.getyPos() < 0;\r\n    }\r\n\r\n    /**\r\n     * moveWarriors() will move all warriors of the respective armies closer to closest enemy detected\r\n     *\r\n     */\r\n    static void moveDrones()\r\n    {\r\n        Controller.Cont(swarms);\r\n    }\r\n\r\n    static int[] enemyDetection(Swarm Attackers, int i){\r\n        int[] coords = new int[3];\r\n        int[] soldierArray = Attackers.drones.get(i).getMinArray();\r\n        int index = soldierArray[0];\r\n        //if detectEnemy comes back with a -1 then there are no more alive enemies\r\n        try\r\n        {\r\n            if (soldierArray[0] == -1)\r\n            {\r\n                throw new Exception(\"That does not exist.\");\r\n            }\r\n        }\r\n        catch (Exception ignored)\r\n        {\r\n        }\r\n        Swarm axis = swarms.get(soldierArray[2]);\r\n        coords[0] = axis.drones.get(index).getxPos();\r\n        coords[1] = axis.drones.get(index).getyPos();\r\n        coords[2] = axis.drones.get(index).getzPos();\r\n        //System.out.println(\"Target; \" + coords[0] + \" , \" + coords[1] + \" , \" + coords[2] );\r\n        return coords;\r\n    }\r\n\r\n    static int[] highestEnemyDetection(Swarm Attackers){\r\n        int[] coords = new int[3];\r\n        int saveHighest = 0;\r\n        int i;\r\n        Swarm axis = null;\r\n        int team = Attackers.getAllianceNum();\r\n        if (team == 1){\r\n            axis = swarms.get(0); //blue teams algo\r\n        } else if (team == 0){\r\n            axis = swarms.get(1); //red teams algo\r\n        }\r\n        \r\n        for (i = 0; i < axis.drones.size() - 1; i++){\r\n            if (axis.drones.get(saveHighest).getzPos() < axis.drones.get(i).getzPos()){\r\n                saveHighest = i;\r\n            }\r\n        }\r\n        coords[0] = axis.drones.get(i).getxPos();\r\n        coords[1] = axis.drones.get(i).getyPos();\r\n        coords[2] = axis.drones.get(i).getzPos();\r\n        //System.out.println(\"Target; \" + coords[0] + \" , \" + coords[1] + \" , \" + coords[2] );\r\n        return coords;\r\n    }\r\n\r\n    static int[] flankLeft(Swarm Attackers, int i){\r\n        int[] coords = new int[3];\r\n        int[] soldierArray = Attackers.drones.get(i).getMinArray();\r\n        int index = soldierArray[0];\r\n        //if detectEnemy comes back with a -1 then there are no more alive enemies\r\n        try\r\n        {\r\n            if (soldierArray[0] == -1)\r\n            {\r\n                throw new Exception(\"That does not exist.\");\r\n            }\r\n        }\r\n        catch (Exception ignored)\r\n        {\r\n        }\r\n        Swarm axis = swarms.get(soldierArray[2]);\r\n\r\n        if(Attackers.drones.get(i).getposAchieved() == 0 && Attackers.getAllianceNum() == 0) {\r\n            //Attackers.drones.get(i).setSpeed(Attackers.drones.get(i).getSpeed());\r\n            coords[0] = ((Main.SIZE * Main.ratioX) / 2) + 300;\r\n            coords[1] = 50;\r\n            coords[2] = Attackers.drones.get(i).getzPos(); //TODO FIX Z STUFF\r\n        } else if (Attackers.drones.get(i).getposAchieved() == 0 && Attackers.getAllianceNum() == 1) {\r\n            coords[0] = ((Main.SIZE * Main.ratioX) / 2) - 300;\r\n            coords[1] = (Main.SIZE*Main.ratioY - 50) ;\r\n            coords[2] = Attackers.drones.get(i).getzPos(); //TODO FIX Z STUFF\r\n        }\r\n\r\n        //System.out.println(\"Target; \" + coords[0] + \" , \" + coords[1] + \" , \" + coords[2] );\r\n        return coords;\r\n    }\r\n\r\n\r\n    static boolean checkCollision(Swarm friendlies, Drone avoidance){\r\n        int radiusSquared = collisionRadius * collisionRadius;\r\n        for (int i = 0; i < friendlies.drones.size(); i++) {\r\n            if(friendlies.drones.get(i).isAlive()){\r\n                Drone comparison = friendlies.drones.get(i);\r\n                int firstHalf = radiusCalculation(avoidance.getxPos(), avoidance.getyPos(), comparison.getxPos(), comparison.getyPos());\r\n                if(firstHalf < radiusSquared){\r\n                    //System.out.println(\"Collision detected between \" + avoidance.getName() + \" and \" + comparison.getName());\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static int radiusCalculation(int x1, int y1, int x2, int y2){\r\n        int xCalc = (x1 - x2) * (x1 - x2);\r\n        int yCalc = (y1 - y2) * (y1 - y2);\r\n        return xCalc + yCalc;\r\n    }\r\n\r\n\r\n    /**\r\n     * drawWarriors() puts the alive warriors of each army on screen in accordance with their x and y positions\r\n     *\r\n     * @param g      the graphics window to draw to\r\n     * @param armies a array list containing all the armies in play\r\n     */\r\n    private static void drawDrone(Graphics2D g, ArrayList<Swarm> armies) {\r\n\r\n        for (Swarm swarm : armies) {\r\n            for (int i = 0; i < swarm.drones.size(); i++) {\r\n                if (swarm.drones.get(i).isAlive()) {\r\n                    swarm.drones.get(i).draw(g);\r\n                    swarm.drones.get(i).drawFire(g);\r\n                    swarm.drones.get(i).locationTracking();\r\n                    swarm.drones.get(i).drawTracking(g);\r\n                }\r\n                else{\r\n                    swarm.drones.get(i).drawExplosion(g);\r\n                }\r\n                swarm.drones.get(i).locationTracking();\r\n                swarm.drones.get(i).drawTracking(g);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * warriorDamage() goes through all armies in play and deals damage to those alive\r\n     *\r\n     * @param armies a array list containing all the armies in play\r\n     */\r\n     static void droneDamage(ArrayList<Swarm> armies) {\r\n        Random rand = new Random();\r\n        for (Object army : armies) {\r\n            Swarm Attackers = (Swarm) army;\r\n            for (int i = 0; i < Attackers.drones.size(); i++) {\r\n                if (Attackers.drones.get(i).isAlive()) {\r\n                    int[] intArray = new int[4];\r\n                    intArray[0] = -1; //index of lowest\r\n                    intArray[1] = 1000; //magnitude of lowest\r\n                    intArray[2] = -1; //army of lowest\r\n                    for (Object o : armies) {\r\n                        Swarm enemySwarm = (Swarm) o;\r\n                        if (enemySwarm.getAllianceNum() != Attackers.getAllianceNum()) {\r\n                            detectEnemy(Attackers.drones.get(i), enemySwarm, intArray);\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (intArray[0] == -1) {\r\n                            throw new Exception(\"That does not exist.\");\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    Swarm Defenders = (Swarm) armies.get(intArray[2]);\r\n\r\n                    //TODO: make this a test case\r\n                    if (magnitude(Attackers.drones.get(i), Defenders, intArray[0]) <= Attackers.drones.get(i).getRange() + Attackers.drones.get(i).getSize() && Defenders.drones.get(intArray[0]).isAlive()) {\r\n                        //determine if attacker has missed the defender\r\n                        if (!(rand.nextInt(100) <= 100 * Attackers.drones.get(i).getAttack() / (Attackers.drones.get(i).getAttack() + Defenders.drones.get(intArray[0]).getAttack()))) {\r\n                            //stop them from moving so that they can shoot or attack\r\n                            Attackers.drones.get(i).setMoving(false);\r\n                            Attackers.drones.get(i).setFireX(Defenders.drones.get(intArray[0]).getxPos());\r\n                            Attackers.drones.get(i).setFireY(Defenders.drones.get(intArray[0]).getyPos());\r\n                            Attackers.drones.get(i).setFiring(true);\r\n\r\n                            //TODO: make test case\r\n                            Defenders.drones.get(intArray[0]).setHealth(Defenders.drones.get(intArray[0]).getHealth() - Attackers.drones.get(i).getAttack()); //removes health\r\n\r\n                            //show how much damage was done\r\n                            //System.out.println(Attackers.drones.get(i).getName() + \" just dealt \" + (Attackers.drones.get(i).getAttack()) + \" damage to \" + Defenders.drones.get(intArray[0]).getName() + \" in army \" + intArray[2]);\r\n\r\n                            if (Defenders.drones.get(intArray[0]).getHealth() <= 0) {\r\n                                playSound();\r\n                                Defenders.drones.get(intArray[0]).setAlive(false);\r\n                                Defenders.drones.get(intArray[0]).setHealth(0);\r\n                                //System.out.println(Attackers.drones.get(i).getName() + \" \" + i + \" just killed \" + Defenders.drones.get(intArray[0]).getName() + \" \" + intArray[0] + \" in army \" + intArray[2]);\r\n                            }\r\n                        } else {\r\n                            //print out a missed message\r\n                            //System.out.println(Attackers.drones.get(i).getName() + \" has just missed \" + Defenders.drones.get(intArray[0]).getName());\r\n                        }\r\n                    } else {\r\n                        Attackers.drones.get(i).setMoving(true);\r\n                    }\r\n                    Attackers.drones.get(i).setMinArray(intArray);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * plays the minecraft death noise when a soldier is killed\r\n     */\r\n    private static void playSound() {\r\n        //creates a noise when a warrior dies\r\n        try {\r\n            File soundFile = new File(fileName);\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(soundFile);\r\n            Clip clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            clip.start();\r\n        } catch (UnsupportedAudioFileException e) {\r\n            //System.out.println(\"Audio file not supported, make sure its a wav\");\r\n        } catch (IOException e) {\r\n            //System.out.println(\"IO exception\");\r\n        } catch (LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * magnitude() calculates the distance from a selected soldier to the closest enemy\r\n     *\r\n     * @param soldier  the selected warrior to compare its distance from a selected enemy\r\n     * @param defender an army containing enemy warriors\r\n     * @param index    the location of the closest enemy to the selected warrior\r\n     * @return the distance between a warrior and a selected enemy\r\n     */\r\n    private static double magnitude(Drone soldier, Swarm defender, int index) {\r\n        double distance;\r\n        double deltaZ;\r\n        Vector330Class calcVector = new Vector330Class();\r\n        calcVector.setX(soldier.getxPos() - defender.drones.get(index).getxPos());\r\n        calcVector.setY(soldier.getyPos() - defender.drones.get(index).getyPos());\r\n        deltaZ = Math.abs(soldier.getzPos() - defender.drones.get(index).getzPos());\r\n        distance = Math.sqrt(deltaZ * deltaZ) + (calcVector.magnitude() + calcVector.magnitude());\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * armySize takes in a (currently) class variable and uses that number to set the number of drones in an army\r\n     *\r\n     * @param allianceNumber the identifier of a swarm\r\n     * @param name the name of the swarm\r\n     * @return a new swarm, or collection of drones\r\n     */\r\n    static Swarm armySize(int allianceNumber, String name, int algoNum) {\r\n        if (name.equals(\"null\")) {\r\n            return new Swarm(allianceNumber, 0, name, 0);\r\n\r\n        } else {\r\n            setDroneArrayAttributes(Drone.DJIStats);\r\n\r\n            return new Swarm(allianceNumber, numDrones, name, algoNum);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Battle.java b/src/Battle.java
--- a/src/Battle.java	(revision b4391aafcc7f4e92ff0afb7938a9b6fecd629b3d)
+++ b/src/Battle.java	(date 1618942680556)
@@ -45,7 +45,7 @@
         array[5] = 10;//minCourage
         array[6] = 30;//maxCourage
         array[7] = 10;//Size
-        array[8] = 200;//Range
+        array[8] = 400;//Range
 
     }
 
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\n\r\n/**\r\n * Project: Swarm Capstone\r\n * : The Room Where It Happens\r\n *\r\n * @author David Thacker\r\n * Date: 21 Jan 21\r\n * Class: Capstone\r\n */\r\npublic class Main {\r\n    //determines the size of the graphics display window\r\n    static final int ratioX = 16;\r\n    static final int ratioY = 9;\r\n    static final int SIZE = 75;\r\n    static final int FLOOR = 1000;\r\n    static final int CEILING = 2000;\r\n    //the time to wait between drawing on screen and moving to next tick\r\n    private static final int TIME_STEP = 100;\r\n\r\n    public static void main(String[] args) {\r\n\r\n        //call for preset values or not user selected values for each warrior class\r\n        Battle battle = new Battle();\r\n        BattleGUI battleGUI = new BattleGUI();\r\n        battleGUI.setBattle(battle);\r\n        JFrame jFrame = new JFrame(\"DRONE SWARMING\");\r\n        jFrame.setContentPane(battleGUI.getHello());\r\n        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        jFrame.pack();\r\n        jFrame.setVisible(true);\r\n        AnimationThread animationThread = new AnimationThread(battleGUI.getAnimationArea());\r\n        animationThread.start();\r\n        animationThread.toggleAnimation();\r\n        battleGUI.setAnimationThread(animationThread);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision b4391aafcc7f4e92ff0afb7938a9b6fecd629b3d)
+++ b/src/Main.java	(date 1618587662618)
@@ -19,7 +19,6 @@
     private static final int TIME_STEP = 100;
 
     public static void main(String[] args) {
-
         //call for preset values or not user selected values for each warrior class
         Battle battle = new Battle();
         BattleGUI battleGUI = new BattleGUI();
